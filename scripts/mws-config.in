#!/bin/sh -e

# Install constants
PREFIX="@CMAKE_INSTALL_PREFIX@"
SYSCONFDIR="@SYSCONFDIR@"
LOCALSTATEDIR="/var/lib/mws"
CONFIGDIR="$PREFIX/$SYSCONFDIR/configs"

# Initialize our own variables:
harvest_path=""
port=""

show_help() {
progname=`basename $0`
cat << EOF
Usage:
    $progname create -p <port> -i <harvest_path> <name> [<extra_args>]
        create configuration for mws deployment
          -p <port>           port used to run MathWebSearch
          -i <harvest_path>   path from where to load harvests (can be used
                              multiple times)
          <extra_args>        extra arguments passed to mws daemon

    $progname list
        list available configurations

    $progname test <name>
        run mwsd configuration in test mode

    $progname enable <name>
        enable configuration

    $progname disable <name>
        disable configuration

    $progname remove <name>
        remove configuration

    $progname help
        display this help message

EOF
}

# utilities
get_path() {
    path="$1"
    dirname="$(cd $(dirname "$path") && pwd -P)"
    basename="$(basename "$path")"
    canonical_path="$dirname/$basename"
    if [ -r "$canonical_path" ]; then
        echo "$canonical_path"
        return 0
    else
        return 1
    fi
}

get_config() {
    name="$1"
    config_file="$PREFIX/$SYSCONFDIR/configs/$name"
    if [ -r "$config_file" ]; then
        echo "$config_file"
        return 0
    else
        return 1
    fi
}

get_name() {
    if [ $# -ge 1 ]; then
        echo "$1"
        return 0
    else
        return 1
    fi
}

config_is_enabled() {
    name="$1"
    [ -r /etc/init.d/mwsd_$name ]
}

error_no_such_config() {
    echo No such configuration \""${name}"\"
    perform_list
    exit 1
}

error_name_expected() {
    echo "<name> expected"
    show_help
    exit 1
}

#
# list
#
perform_list() {
    echo "Available configurations:"
    for config_file in $(cd $PREFIX/$SYSCONFDIR/configs && ls); do
        echo " $config_file"
    done
}

#
# create
#
perform_create() {
OPTIND=1
while getopts "p:i:f" opt; do
    case "$opt" in
    p)
        port=$OPTARG
        ;;
    i)
        harvest_path=$OPTARG
        canonical_harvest_path=`get_path $harvest_path` || {
            echo "Invalid path $harvest_path"
            exit 1
        }
        extra_args="$extra_args -I $canonical_harvest_path"
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# get name
if [ $# -lt 1 ]; then
    echo "<name> expected"
    show_help
    exit 1
fi
suffix="$1"
shift

# get extra arguments
extra_args="$extra_args $@"

if [ -z "$port" ]; then
    echo "no <port> provided"
    show_help
    exit 1
fi

if [ -z "$harvest_path" ]; then
    echo "no <harvest_path> provided"
    show_help
    exit 1
fi

NAME="mwsd_$suffix"
DESC="MathWebSearch $suffix daemon"
MWS_DATA_PATH="$LOCALSTATEDIR/$suffix"
MWS_LOG_FILE="/var/log/$NAME.log"
MWS_PID_FILE="/var/run/$NAME.pid"

# Create user if it doesn't already exist
id -u $NAME > /dev/null 2>&1 || useradd $NAME
mkdir -p $MWS_DATA_PATH
touch $MWS_LOG_FILE
touch $MWS_PID_FILE
chown $NAME:$NAME $MWS_DATA_PATH $MWS_LOG_FILE $MWS_PID_FILE
cat > "$CONFIGDIR/$suffix" << EOF
# Configuration file for the $NAME

NAME="$NAME"
DESC="$DESC"

# data directory
MWS_DATA_PATH="$MWS_DATA_PATH"

# HTTP listen port
MWS_PORT="${port}"

# log file
MWS_LOG_FILE="$MWS_LOG_FILE"

# pid file
MWS_PID_FILE="$MWS_PID_FILE"

# Extra command-line arguments passed to mwsd
MWS_DAEMON_EXTRA_ARGS="${extra_args}"
EOF
echo Created MathWebSearch configuration ${name}
}

perform_test() {
    name="`get_name "$@"`" || error_name_expected

    # include configuration
    config_file="`get_config "$name"`" || error_no_such_config "$name"
    . "$config_file"

    # run mwsd in test mode
    echo Testing configuration ${name}...
    MWSD_ARGS="
        --mws-port $MWS_PORT \
        $MWS_DAEMON_EXTRA_ARGS
    "
    PATH=$PREFIX/bin:$PATH
    mwsd $MWSD_ARGS
}

perform_enable() {
    name="`get_name "$@"`" || error_name_expected

    # include configuration
    config_file="`get_config "$name"`" || error_no_such_config "$name"
    . "$config_file"

    if config_is_enabled "$name"; then
        echo Configuration \""$name"\" is already enabled
        exit 0
    fi

    target=/etc/init.d/mwsd_$name
    echo Creating $target
    cat - $PREFIX/$SYSCONFDIR/mwsd-service.sh > $target << EOF
#! /bin/sh
### BEGIN INIT INFO
# Provides:          mwsd_$name
# Required-Start:    \$remote_fs \$syslog
# Required-Stop:     \$remote_fs \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       This starts the MathWebSearch daemon
### END INIT INFO

. $CONFIGDIR/$name

EOF
    chmod +x $target

    echo Enabling service mwsd_$name
    update-rc.d mwsd_$name defaults

    echo Starting service mwsd_$name
    service mwsd_$name start
}

perform_disable() {
    name="`get_name "$@"`" || error_name_expected

    # include configuration
    config_file="`get_config "$name"`" || error_no_such_config "$name"
    . "$config_file"

    if config_is_enabled "$name"; then
        echo Stopping service mwsd_$name
        service mwsd_$name stop

        echo Disabling service mwsd_$name
        rm -f /etc/init.d/mwsd_$name
        update-rc.d -f mwsd_$name remove
    else
        echo Configuration \""$name"\" is already disabled
        exit 0
    fi
}

perform_remove() {
    name="`get_name "$@"`" || error_name_expected

    # include configuration
    config_file="`get_config "$name"`" || error_no_such_config "$name"
    . "$config_file"

    if config_is_enabled "$name"; then
        echo Stopping service mwsd_$name
        service mwsd_$name stop

        echo Disabling service mwsd_$name
        rm -f /etc/init.d/mwsd_$name
        update-rc.d -f mwsd_$name remove
    fi

    echo Removing configuration $config_file
    rm $config_file

    # Removing user
    id -u mwsd_$name > /dev/null 2>&1 && userdel mwsd_$name
}

# Handle initial arguments

# action should be provided
if [ $# -eq 0 ]; then
    echo Action expected
    show_help
    exit 1
fi

action="$1"
shift
case "$action" in
    create)
        perform_create $@
        ;;
    list)
        perform_list
        ;;
    test)
        perform_test $@
        ;;
    enable)
        perform_enable $@
        ;;
    disable)
        perform_disable $@
        ;;
    remove)
        perform_remove $@
        ;;
    help)
        show_help
        exit 0
        ;;
    *)
        echo Unknown action \"$action\"
        show_help
        exit 1
        ;;
esac
